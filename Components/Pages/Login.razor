@page "/login"
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@code {
    private string Username { get; set; }
    private string Password { get; set; }
    private string Domain { get; set; }
    private string ErrorMessage { get; set; }

    private async Task HandleLogin()
    {
        ErrorMessage = null;
        try
        {
            // Call the authentication service to get JWT token
            var auth = new AuthService();
            var token = await auth.LoginAsync(Domain, Username, Password);

            // Store the token in local storage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", token);

            // Redirect to home page after successful login
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}

<div class="login-form">
    <h3>Login</h3>
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">@ErrorMessage</div>
    }
    <input placeholder="Domain" @bind="Domain" />
    <input placeholder="Username" @bind="Username" />
    <input type="password" placeholder="Password" @bind="Password" />
    <button @onclick="HandleLogin">Login</button>
</div>
